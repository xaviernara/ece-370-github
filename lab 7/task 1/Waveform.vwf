/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off lab7_task1 -c jk_flop --vector_source="H:/ece 370/ece 370 github/lab 7/task 1/Waveform.vwf" --testbench_file="H:/ece 370/ece 370 github/lab 7/task 1/simulation/qsim/Waveform.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off lab7_task1 -c jk_flop --vector_source="H:/ece 370/ece 370 github/lab 7/task 1/Waveform.vwf" --testbench_file="H:/ece 370/ece 370 github/lab 7/task 1/simulation/qsim/Waveform.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="H:/ece 370/ece 370 github/lab 7/task 1/simulation/qsim/" lab7_task1 -c jk_flop</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="H:/ece 370/ece 370 github/lab 7/task 1/simulation/qsim/" lab7_task1 -c jk_flop</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work jk_flop.vho
vcom -work work Waveform.vwf.vht
vsim -novopt -c -t 1ps -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.jk_flop_vhd_vec_tst
vcd file -direction lab7_task1.msim.vcd
vcd add -internal jk_flop_vhd_vec_tst/*
vcd add -internal jk_flop_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work jk_flop.vho
vcom -work work Waveform.vwf.vht
vsim -novopt -c -t 1ps -sdfmax jk_flop_vhd_vec_tst/i1=jk_flop_vhd.sdo -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.jk_flop_vhd_vec_tst
vcd file -direction lab7_task1.msim.vcd
vcd add -internal jk_flop_vhd_vec_tst/*
vcd add -internal jk_flop_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 8000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 62.5;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("EN")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("J")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("K")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Q")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Qbar")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 62.5;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 62.5;
			LEVEL 1 FOR 62.5;
		}
		LEVEL 0 FOR 62.5;
	}
}

TRANSITION_LIST("EN")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 875.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 750.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 750.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 375.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
	}
}

TRANSITION_LIST("J")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 375.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 875.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
	}
}

TRANSITION_LIST("K")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 375.0;
		LEVEL 0 FOR 375.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 375.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
		LEVEL 0 FOR 125.0;
		LEVEL 1 FOR 125.0;
	}
}

TRANSITION_LIST("Q")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 999.0;
		LEVEL 0 FOR 7001.0;
	}
}

TRANSITION_LIST("Qbar")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 999.0;
		LEVEL 0 FOR 7001.0;
	}
}

TRANSITION_LIST("rst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 187.5;
		LEVEL 0 FOR 6812.5;
		LEVEL 1 FOR 62.5;
		LEVEL 0 FOR 937.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "EN";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "J";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "K";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Q";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Qbar";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
